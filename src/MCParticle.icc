// This is the implementation of the wrappers for the MCParticle class

lciowrap.add_type<EVENT::MCParticle>("MCParticle")
    .method("getEnergy", &EVENT::MCParticle::getEnergy)
    .method("getPDG", &EVENT::MCParticle::getPDG)
    .method("getGeneratorStatus", &EVENT::MCParticle::getGeneratorStatus)
    .method("getSimulatorStatus", &EVENT::MCParticle::getSimulatorStatus)
    .method("isCreatedInSimulation", &EVENT::MCParticle::isCreatedInSimulation)
    .method("isBackscatter", &EVENT::MCParticle::isBackscatter)
    .method("vertexIsNotEndpointOfParent", &EVENT::MCParticle::vertexIsNotEndpointOfParent)
    .method("isDecayedInTracker", &EVENT::MCParticle::isDecayedInTracker)
    .method("isDecayedInCalorimeter", &EVENT::MCParticle::isDecayedInCalorimeter)
    .method("hasLeftDetector", &EVENT::MCParticle::hasLeftDetector)
    .method("isStopped", &EVENT::MCParticle::isStopped)
    .method("isOverlay", &EVENT::MCParticle::isOverlay)
    .method("getTime", &EVENT::MCParticle::getTime)
    .method("getMass", &EVENT::MCParticle::getMass)
    .method("getCharge", &EVENT::MCParticle::getCharge);

jlcxx::stl::apply_stl<EVENT::MCParticle*>(lciowrap);

// These methods have to be declared separately from the type MCParticle, so that CxxWrap
// can generate the type and generate the templates specializations for the std::vector,
// which are returned by the methods here
lciowrap.method("getParents", [](const EVENT::MCParticle* p)->const std::vector<EVENT::MCParticle*>& {
    return p->getParents();
});
lciowrap.method("getDaughters", [](const EVENT::MCParticle* p)->const std::vector<EVENT::MCParticle*>& {
    return p->getDaughters();
});

// returns a bool to indicate whether this was a nullptr
lciowrap.method("getVertex3", [](const EVENT::MCParticle* p, ArrayRef<double> v)->bool {
    const double* vtx = p->getVertex();
    if (not vtx) {return false;}
    v[0] = vtx[0];
    v[1] = vtx[1];
    v[2] = vtx[2];
    return true;
});
// returns a bool to indicate whether this was a nullptr
lciowrap.method("getEndpoint3", [](const EVENT::MCParticle* p, ArrayRef<double> pos)->bool {
    const double* endp = p->getEndpoint();
    if (not endp) {return false;}
    pos[0] = endp[0];
    pos[1] = endp[1];
    pos[2] = endp[2];
    return true;
});
// returns a bool to indicate whether this was a nullptr
lciowrap.method("getMomentum3", [](const EVENT::MCParticle* p, ArrayRef<double> p3)->bool {
    const double* mom = p->getMomentum();
    if (not mom) {return false;}
    p3[0] = mom[0];
    p3[1] = mom[1];
    p3[2] = mom[2];
    return true;
});
// returns a bool to indicate whether this was a nullptr
lciowrap.method("getMomentumAtEndpoint3", [](const EVENT::MCParticle* p, ArrayRef<double> p3)->bool {
    const double* mom = p->getMomentumAtEndpoint();
    if (not mom) {return false;}
    p3[0] = mom[0];
    p3[1] = mom[1];
    p3[2] = mom[2];
    return true;
});

// This is the C++ implementation
// We're giving this an obscure name, because the
// Julia implementation needs to carry around the default
// event that can be updated in the iteration.
// Otherwise, readEvent returns a new collection every time that
// would have to be deleted by hand
lciowrap.add_type<UTIL::LCStdHepRdr>("_LCStdHepRdrCpp")
    .constructor<const char*>()
    .method("getNumberOfEvents", &UTIL::LCStdHepRdr::getNumberOfEvents)
    .method("readEvent", &UTIL::LCStdHepRdr::readEvent)
    .method("updateNextEvent", &UTIL::LCStdHepRdr::updateNextEvent);

    
lciowrap.add_type<IMPL::MCParticleImpl>("MCParticleImpl", jlcxx::julia_type<MCParticle>())
    .method("setGeneratorStatus", &IMPL::MCParticleImpl::setGeneratorStatus)
    .method("setMass", &IMPL::MCParticleImpl::setMass)
    .method("setPDG", &IMPL::MCParticleImpl::setPDG)
    .method("setCharge", &IMPL::MCParticleImpl::setCharge);
lciowrap.method("setMomentum", [](IMPL::MCParticleImpl& mcp, const ArrayRef<double> p3) {
    double mom[] = {p3[0], p3[1], p3[2]};
    mcp.setMomentum(mom);
});

lciowrap.method("addElement", [](IMPL::LCCollectionVec& coll, IMPL::MCParticleImpl& mcp) {
    // TODO: For the time being we have to copy things that go into the
    // collection, because it owns it and wants to kill its members
    coll.addElement(new MCParticleImpl(mcp));
});
