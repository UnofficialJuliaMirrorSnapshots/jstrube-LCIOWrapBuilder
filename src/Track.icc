// This is the implementation of the wrappers for the Track and Trackstate classes

lciowrap.add_type<UTIL::LCTrackerCellID>("LCTrackerCellID");
lciowrap.method("subdet", [](const UTIL::LCTrackerCellID& parms) {
        return parms.subdet();
});
lciowrap.method("side", [](const UTIL::LCTrackerCellID& parms) {
        return parms.side();
});
lciowrap.method("layer", [](const UTIL::LCTrackerCellID& parms) {
        return parms.layer();
});
lciowrap.method("module", [](const UTIL::LCTrackerCellID& parms) {
        return parms.module();
});
lciowrap.method("sensor", [](const UTIL::LCTrackerCellID& parms) {
        return parms.sensor();
});
lciowrap.method("valueString", [](const UTIL::LCTrackerCellID& parms, unsigned val) {
        return parms.valueString(val);
});
lciowrap.method("encoding_string", [](const UTIL::LCTrackerCellID& parms) {
        return parms.encoding_string();
});
lciowrap.method("set_encoding_string", [](UTIL::LCTrackerCellID* parms, const std::string& value) {
        return parms->set_encoding_string(value);
});
lciowrap.method("setAccessed", [](UTIL::LCTrackerCellID* parms) {
        return parms->setAccessed();
});

lciowrap.add_type<EVENT::TrackState>("TrackState")
    .method("getLocation", &EVENT::TrackState::getLocation)
    .method("getD0", &EVENT::TrackState::getD0)
    .method("getPhi", &EVENT::TrackState::getPhi)
    .method("getOmega", &EVENT::TrackState::getOmega)
    .method("getZ0", &EVENT::TrackState::getZ0)
    .method("getTanLambda", &EVENT::TrackState::getTanLambda)
    .method("getCovMatrix", &EVENT::TrackState::getCovMatrix);
lciowrap.add_type<EVENT::TrackStateVec>("TrackStateVec")
    .method("size", &EVENT::TrackStateVec::size);
lciowrap.method("at", [](const EVENT::TrackStateVec& vec, size_t i) {
    return vec.at(i);
});
lciowrap.method("getReferencePoint3", [](const EVENT::TrackState* t, ArrayRef<double> x)->bool {
    const float* p3 = t->getReferencePoint();
    if (not p3) {return false;}
    x[0] = p3[0];
    x[1] = p3[1];
    x[2] = p3[2];
    return true;
});


lciowrap.add_type<EVENT::Track>("Track")
    .method("getType", &EVENT::Track::getType)
    .method("getD0", &EVENT::Track::getD0)
    .method("getPhi", &EVENT::Track::getPhi)
    .method("getOmega", &EVENT::Track::getOmega)
    .method("getZ0", &EVENT::Track::getZ0)
    .method("getTanLambda", &EVENT::Track::getTanLambda)
    .method("getCovMatrix", &EVENT::Track::getCovMatrix)
    .method("getChi2", &EVENT::Track::getChi2)
    .method("getNdf", &EVENT::Track::getNdf)
    .method("getdEdx", &EVENT::Track::getdEdx)
    .method("getdEdxError", &EVENT::Track::getdEdxError)
    .method("getRadiusOfInnermostHit", &EVENT::Track::getRadiusOfInnermostHit)
    .method("getSubdetectorHitNumbers", &EVENT::Track::getSubdetectorHitNumbers)
    .method("getClosestTrackState", &EVENT::Track::getClosestTrackState)
    .method("getTrackState", &EVENT::Track::getTrackState)
    .method("getTrackerHits", &EVENT::Track::getTrackerHits);

lciowrap.add_type<EVENT::TrackVec>("TrackVec")
    .method("size", &EVENT::TrackVec::size);
lciowrap.method("at", [](const EVENT::TrackVec& vec, size_t i) {
    return vec.at(i);
});
lciowrap.method("getReferencePoint3", [](const EVENT::Track* t, ArrayRef<double> x)->bool {
    const float* p3 = t->getReferencePoint();
    if (not p3) {return false;}
    x[0] = p3[0];
    x[1] = p3[1];
    x[2] = p3[2];
    return true;
});
lciowrap.method("getTracks", [](const Track* t)->const TrackVec& {
    return t->getTracks();
});
lciowrap.method("getTrackStates", [](const Track* t)->const TrackStateVec& {
    return t->getTrackStates();
});
