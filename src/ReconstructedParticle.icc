// This is the implementation of the wrappers for the ReconstructedParticle class

lciowrap.add_type<EVENT::ReconstructedParticle>("ReconstructedParticle")
    .method("getType", &EVENT::ReconstructedParticle::getType)
    .method("isCompound", &EVENT::ReconstructedParticle::isCompound)
    .method("getEnergy", &EVENT::ReconstructedParticle::getEnergy)
    .method("getMass", &EVENT::ReconstructedParticle::getMass)
    .method("getCharge", &EVENT::ReconstructedParticle::getCharge)
    .method("getGoodnessOfPID", &EVENT::ReconstructedParticle::getGoodnessOfPID)
    .method("getClusters", &EVENT::ReconstructedParticle::getClusters)
    .method("getTracks", &EVENT::ReconstructedParticle::getTracks)
    .method("getStartVertex", &EVENT::ReconstructedParticle::getStartVertex)
    .method("getEndVertex", &EVENT::ReconstructedParticle::getEndVertex);
lciowrap.method("getMomentum3", [](const EVENT::ReconstructedParticle* p, ArrayRef<double> mom)->bool {
    const double* p3 = p->getMomentum();
    if (not p3) {return false;}
    mom[0] = p3[0];
    mom[1] = p3[1];
    mom[2] = p3[2];
    return true;
});
lciowrap.method("getCovMatrix", [](){
    cerr << "not yet implemented" << endl;
});
lciowrap.method("getReferencePoint3", [](const EVENT::ReconstructedParticle* p, ArrayRef<double> point)->bool {
    const float* x = p->getReferencePoint();
    if (not x) {return false;}
    point[0] = x[0];
    point[1] = x[1];
    point[2] = x[2];
    return true;
});
lciowrap.method("getParticleIDUsed", [](){
    cerr << "not yet implemented" << endl;
});

lciowrap.add_type<EVENT::ReconstructedParticleVec>("ReconstructedParticleVec")
    .method("size", &EVENT::ReconstructedParticleVec::size);
lciowrap.method("at", [](const EVENT::ReconstructedParticleVec& vec, size_t i) {
    return vec.at(i);
});

lciowrap.method("getParticles", [](const EVENT::ReconstructedParticle* p)->const ReconstructedParticleVec& {
    return p->getParticles();
});
