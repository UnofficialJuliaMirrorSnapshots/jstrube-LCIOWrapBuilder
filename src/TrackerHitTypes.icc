// This is the implementation of the wrappers for the different CalorimeterHit classes

lciowrap.add_type<EVENT::SimTrackerHit>("SimTrackerHit")
    .method("getCellID0", &EVENT::SimTrackerHit::getCellID0)
    .method("getCellID1", &EVENT::SimTrackerHit::getCellID1)
    .method("getdEdx", &EVENT::SimTrackerHit::getdEdx)
    .method("getEDep", &EVENT::SimTrackerHit::getEDep)
    .method("getMCParticle", &EVENT::SimTrackerHit::getMCParticle)
    .method("getPathLength", &EVENT::SimTrackerHit::getPathLength)
    .method("getQuality", &EVENT::SimTrackerHit::getQuality)
    .method("getTime", &EVENT::SimTrackerHit::getTime)
    .method("isOverlay", &EVENT::SimTrackerHit::isOverlay)
    .method("isProducedBySecondary", &EVENT::SimTrackerHit::isProducedBySecondary);

jlcxx::stl::apply_stl<EVENT::SimTrackerHit*>(lciowrap);

// returns a bool to indicate whether this was a nullptr
lciowrap.method("getPosition3", [](const EVENT::SimTrackerHit* hit, ArrayRef<double> x)->bool {
    const double* p = hit->getPosition();
    if (not p) {return false;}
        x[0] = p[0];
        x[1] = p[1];
        x[2] = p[2];
    return true;
});

// returns a bool to indicate whether this was a nusllptr
lciowrap.method("getMomentum3", [](const EVENT::SimTrackerHit* hit, ArrayRef<double> x)->bool {
    const float* p = hit->getMomentum();
    if (not p) {return false;}
        x[0] = p[0];
        x[1] = p[1];
        x[2] = p[2];
    return true;
});

lciowrap.add_type<EVENT::TrackerHit>("TrackerHit")
    .method("getCellID0", &EVENT::TrackerHit::getCellID0)
    .method("getCellID1", &EVENT::TrackerHit::getCellID1)
    .method("getCovMatrix", &EVENT::TrackerHit::getCovMatrix)
    .method("getdEdx", &EVENT::TrackerHit::getdEdx)
    .method("getTime", &EVENT::TrackerHit::getTime)
    .method("getType", &EVENT::TrackerHit::getType)
    .method("getQuality", &EVENT::TrackerHit::getQuality)
    .method("getEDep", &EVENT::TrackerHit::getEDep)
    .method("getEDepError", &EVENT::TrackerHit::getEDepError);

// returns a bool to indicate whether this was a nullptr
lciowrap.method("getPosition3", [](const EVENT::TrackerHit* hit, ArrayRef<double> x)->bool {
    const double* p = hit->getPosition();
    if (not p) {return false;}
        x[0] = p[0];
        x[1] = p[1];
        x[2] = p[2];
    return true;
});

jlcxx::stl::apply_stl<EVENT::TrackerHit*>(lciowrap);

lciowrap.add_type<EVENT::TrackerData>("TrackerData")
    .method("getCellID0", &EVENT::TrackerData::getCellID0)
    .method("getCellID1", &EVENT::TrackerData::getCellID1)
    .method("getTime", &EVENT::TrackerData::getTime)
    .method("getChargeValues", &EVENT::TrackerData::getChargeValues);

lciowrap.add_type<EVENT::TrackerRawData>("TrackerRawData")
    .method("getCellID0", &EVENT::TrackerRawData::getCellID0)
    .method("getCellID1", &EVENT::TrackerRawData::getCellID1)
    .method("getTime", &EVENT::TrackerRawData::getTime)
    .method("getADCValues", &EVENT::TrackerRawData::getADCValues);

lciowrap.add_type<EVENT::TrackerPulse>("TrackerPulse")
    .method("getCellID0", &EVENT::TrackerPulse::getCellID0)
    .method("getCellID1", &EVENT::TrackerPulse::getCellID1)
    .method("getTime", &EVENT::TrackerPulse::getTime)
    .method("getCharge", &EVENT::TrackerPulse::getCharge)
    .method("getCovMatrix", &EVENT::TrackerPulse::getCovMatrix)
    .method("getQuality", &EVENT::TrackerPulse::getQuality)
    .method("getTrackerData", &EVENT::TrackerPulse::getTrackerData);
